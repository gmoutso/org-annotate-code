* Description
~org-annotate-code~ allows you to annotate files so that annotations (comments) are stored in a separate annotation org-mode file. The annotations are in tree hierarchy. By default, the tree at first level is the filename  and at second the line number where the annotation is made. All this can be achieved with an ordinary org-capture, but ~org-annotate-code~ allows more customization of how the annotations are stores. 

Locally per buffer file you can change in which file the annotations are stored and if there is a top-level heading always inserted. How annotations are formed can also be decided per pajor mode. For example, ~org-annotate-python~ annotates python code definitions (functions, classes or variables). The org-mode hierarchy, that is the tree structure in the annotation org-mode file, when annotating on a variable definition might look like ~file name -> function definition -> local variable~ or ~filename -> global variable~. See more on [[org-annotate-python]], which allows specific customization. The headlines of these trees can be changed later on, because the annotation itself is identified by its ~CUSTOM_ID~. There is also the possibility to move subtrees and still find the annotations if an annotation is retriggered. How the annotations are formed including setting the ids can be overrided locally per buffer file, otherwise the major mode or default is used.

One can customize ~org-annotate-code~ by always having a top-level heading, either globally or per file. Beyond this, typically the top-level heading is the filename. By default the next level is the line number, but one could define per mode or locally an arbitrary hierarchy as is done for python. Retrigering the annotation should find the same item in the org-mode file by its custom id. The annotation can be made using a capture template with the function ~org-annotate-code-capture-finding-location~ or with the command ~org-annotate-code-create~.

* Details
The top-level heading is set by ~org-annotate-code-heading0~ and is ~nil~ by default. The annotation file is set by ~org-annotation-code-org-file~. How the hierarchy is created can be customized by setting ~org-annotate-code-info-override~.

The custom id properties link back to the annotated file. Once created, the custom id links should not be changed but the headings can. You can then visit the annotated file or the annotated section by ~C-c C-o~ while on the heading of the annotation. 

The whole tree can be moved and/or demoted somewhere else in the annotation file. If an annotation at the same place is triggered, there are two options. Either the moved bottom-level org-mode item is found by its id or a new strict hierarchy of items will be created as before the subtree was moved. To customize which method is used, see  ~org-annotate-code-search-annotation-method~.  The bottom-up search is useful because although the original headings are automatically inserted when first created by the annotation functions, later on a better heading description or placement of the structure might be decided differently.

What is inserted as custom id links and the original headings is customizable per major-mode of the annotated file. Typically, the first level heading is the file name and the id link is to the file itself. For ~python-mode~, the second level heading is the name of the function, class or global variable definition, which is located either at point or at the nearest upper block. There can be arbitrary subnodes defined. The second level heading can be the symbol at point and the id link a search for this symbol using ~[[file:filename::search]]~.  An annotation is defined as a list of nodes, where each node is a plist with keys ~:id~, ~:heading~ and possibly ~:properties~. A function that allows annotations should return at point such a list. To customize the annotations per mode see ~org-annotate-code-info-alist~ that associates major-modes to such functions. To override the per-mode function or default, see ~org-annotate-code-info-override~.
* Annotators
** org-annotate-python
 Links are possible by defining a new link type called pydef, eg ~[[pydef:filename.py::newfun.newsubfun.localvariable]]~. By default a selection list is presented to the user for what is to be annotated, eg ~newfun~, ~newfun.newsubfun~ or ~newfun.newsubfun.localvariable~. If the user chooses to annotate ~newfun.newsubfun~ then  the annotation will have hierarchy ~filename.py -> newfun -> newfun.newsubfun~. In order to customize the defaults, see ~org-annotate-python-squash-annotation-level~ and ~org-annotate-python-squash-candidates-level~. 

* Similar Packages
This section was true at the time of writing (2020-06-24). I can amend or add upon request.

~org-annotate-file~ is similar, but ~org-annotate-code~ allows more configuration
 - the links are in custom id properties instead of the headings and so headings can change at will
 - a function for org-mode capture is provided
 - one can customize the annotation metadata per major-mode

~annotation-mode~ is a useful package that annotates non-destructively files. These annotations are not saved in org-mode, but are loaded globally per session from a storage file. It has some very useful features, eg.
 - the annotated words or sentences are highlighted and the annotations are shown below as overlays in the annotated file
 - the annotations are identified by exact positions that are updated live when text is changed in the annotated file. This is to be constrasted to this package that identifies annotations with searches or line numbers that are not updated
Only if the annotated file was changed when the file was not loaded (I think of ~git pull~) or ~annotation-mode~ was not loaded when changes are made, are the annotation positions identified with a nearby search. Personally, I use ~annotation-mode~ to comment symbols in code but use ~org-annotation-code~ to describe longer function flows or logic in python.

* Ideas
This package is work in progress. Currently thinking of highlights and making temporary lists of annotations per file. Also making the default a search for word near line number.
